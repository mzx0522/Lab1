

Please read README.txt

哈尔滨工业大学计算机科学与技术学院
2016年秋季学期《软件工程》
Lab 1：结对编程


















姓名	班级/学号	联系方式
马子骁	4班/140310426	645441785@qq.com
王伊	4班/140310402	1142346199@qq.com



 
目  录

1	实验要求	1
2	待求解问题描述与数学模型	1
8	算法与数据结构设计	1
8.1	设计思路	1
11.1	算法流程图	2
11.2	核心数据结构	2
11.3	算法时间复杂度分析	3
12	实验结果	3
12.1	输入/期望输出/实际输出	4
12.2	程序运行界面截图	4
20	编程语言与开发环境	7
21	结对编程	8
21.1	分组依据	8
21.2	角色切换与任务分工	8
21.3	工作照片	9
21.4	工作日志	10
22	计划与实际进度	10
23	小结	10

 
1	实验要求
1、两人一组，自由组合；
2、使用一台计算机，共同编码，完成实验要求；
3、在工作期间，两人的角色至少切换6次；
4、使用JAVA+Eclipse编程。
2	待求解问题描述与数学模型
3	开发一个Java命令行程序，实现多项式的输入、求值、求导操作。程序运行之后，用户在命令行输入表达式或命令，程序反馈结果；
4	对于输入的表达式，遵守的语法是对于一个输入的多项式，每一项的变量与常量之间用乘号连接，允许有多个字符的变量，并且乘号不能省去，单项式之间用加号或减号相连中间允许有空格等空白字符出现。
5	对于求值操作，当输入表达式后，求值命令格式为 !simply x=2 y=3；类似这种格式需要注意的是变量名与其替换的常量之间只有等号连接不能有其他字符或空白符号参与，不同空格之间用空白符分割，可以有多个空白符出现。
6	对于求导操作，在表达式输入之后，需输入的求导命令格式为!d/d x；待求导变量与后一个d之间有空格连接。
7	无论是求值还是求导操作都按照数学运算规律进行计算。
8	算法与数据结构设计
8.1	设计思路
9	本算法用到了两个类，两者之间关系是嵌套关系，主类里面声明嵌套了另外一个类，称其为副类，在主类中主要的方法有对输入字符进行匹配，成功的匹配分为3种，第一种是表达式匹配成功，第二种是求值命令匹配成功，第三种是求导命令匹配成功；或者都没有匹配上，也就意味着匹配失败重新输入或者是退出，对于匹配算法，主要用到了正则表达式。
10	  如果匹配成功的话，那么就针对不同的匹配类型调用不同的方法进行处理，而这些调用的方法就是在副类中实现的。
11	  第一类匹配后调用的方法比较简单，就是把匹配后的表达式存储起来，以便以后用到；第二类匹配成功后由于是求值运算，首先对表达式整体遍历一遍，在内部用加号或者减号对表达式分割处理，得到每一项，然后对每一项可能进行替换操作，也就是将表达式中变量用常量字符替换，然后进行字符转整数操作，并进行乘法操作，将单项中计算后为常量字符，也就是单项中没有变量的单项都合并到一起（进行加减操作），最后将常量字符与变量字符(可能不存在)拼接在一起，将表达式输出；如果是求导操作，首先也是对表达式整体遍历一遍并按照加减号进行分割，然后对于每一项，首先判断待求导变量是否在其中，如在，看是否只有一项，对每一项，遇到的变量的幂都保存起来，目的是合起来进行求导，这样做是为了满足数学运算，其余操作与算数运算类似。
11.1	算法流程图
 
11.2	核心数据结构
使用StringBuffer类来存储多项式。
11.3	算法时间复杂度分析
求导过程
public static void Derivation(StringBuffer beforeD,String x)
	此过程对多项式进行求导，初步求导后再对式子形式进行修改，遍历两次多项式，时间复杂度为O(n^2)
分析过程
public static void Analyst(StringBuffer str,String x)
将多项式拆分成一个个单项式，遍历一边多项式，时间复杂度为O(n)
简化过程
Simplyfy
遍历一遍多项式，使用replace方法需要遍历一边多项式，则时间复杂度为O(n^2)
12	实验结果
设计一组不少于20个覆盖各种约束条件的输入数据（多项式），在你开发的程序中分别输入，记录程序的输出结果，判断输出结果是否与期望一致。
12.1	输入/期望输出/实际输出
 
12.2	程序运行界面截图
13	 
14	 
15	 
16	 
17	 
18	 
19	 
20	编程语言与开发环境
Java JRE版本
Eclipse Java IDE Neon版本
21	结对编程
21.1	分组依据
马子骁同学编程动手能力强，在大一时选修过Java语言程序设计，对于Java语言各种类与方法比较熟悉；王伊同学思维灵活，善于程序设计但对Java语言不是很熟悉。我们两个人组成二人队伍刚好互补，最强双手与最强大脑的组合，有效提高了结对编程的效率。
反过来说，结对编程需要角色互换，正好给了我们一个机会弥补自己不足之处。让马子骁同学锻炼程序设计能力，增强思维灵活度；同时让王伊同学在指导下较快的掌握Java语言，提高动手能力。
21.2	角色切换与任务分工
该表格可自行增加更多的行。

日期	工作时间(HH:MM -- HH:MM)	“驾驶员”	“领航员”	本段时间的任务
09.13	10：00―11：45	马子骁	王伊	构思程序框架
09.15	14：00―16：30	王伊	马子骁	入口函数编写
09.17	14：00―16：30	马子骁	王伊	布置用户界面
09.19	14:00―16:30	王伊	马子骁	设计求导算法
09.22	19：00―20：00	马子骁	王伊	实现多项式求导功能，
09.23	19：30―21：00	王伊	马子骁	完成简化功能
09.25	13：30―14：30	马子骁	王伊	完成多项式形式整理，Debug
21.3	工作照片

 
21.4	工作日志
由领航员负责记录，记录结对编程期间的遇到的问题、两人如何通过交流合作解决每个问题的。可增加表格的行。
日期/时间	问题描述	最终解决方法	两人如何通过交流找到解决方法
09.13	对多项式求导过程中首先要分析出式子结构，发现在同一个函数中实现有困难，并且会使程序冗杂，逻辑不清晰。	将功能更加细化，分别为多项式分析函数和具体求导函数，将式子传给分析函数，由分析函数控制求导函数。逻辑更加清楚，维护更加简单。	在设计程序结构时两人达成了共识：尽量使函数功能简单化，逻辑清晰化。实现求导功能时发现一个函数过于混乱，立即决定将功能拆分成不同模块。
09.16	完成求导具体计算功能时对于求导结果式子字符串形式进行了很多尝试与调整。	花了一些时间检查代码，对代码进行一些调整	细心耐心，两个人一起取发现程序的问题。
09.24	角色互换完成多项式简化过程中速度变慢，实习动手编程时略微困难。	加强课下学习，紧密配合完成工作。	加强课下学习，快速掌握Java语言编程优势。两人紧密合作，发挥人多力量大的优势。
22	计划与实际进度
任务编号	计划时间长度（分钟）	实际耗费时间（分钟）	提前或延期的原因分析
01	1.5小时	2	最初不适应结对编程，没有充分发挥结对编程的优势
02	3小时	5小时	初期编程代码质量不高，思考不够全面，逐渐测试过程中发现问题并逐一解决
03	2小时	4小时	在几个功能对接的时候暴露出代码漏洞，加以修改
23	小结
一、和两人分别编程相比，首先结对编程明显效率更高，因为人都是有惰性的，自己一个人有可能会走神，偷懒。但是两人结对编程全程交流、动手编程，间接起到了互相监督的作用，更加集中注意力，能够集中一段时间解决问题。其次两个人毫无疑问思路更加宽广，相比一个人局限性更小，有了更多的思考与想法，解决问题更有效虑。
二、结对编程的优点：
1.程序员互相帮助，互相教对方，可以得到能力上的互补。 
2.增强代码和产品质量，并有效的减少BUG。
3. 降低学习成本。一边编程，一边共享知识和经验，有效地在实践中进行学习。
4. 在编程中，相互讨论，可能更快更有效地解决问题。
结对编程的缺点：
1.对于有不同习惯的编程人员，可以在起工作会产生麻烦，甚至矛盾。
2.有时候，程序员们会对一个问题各执己见（代码风格可能会是引发技术人员口水战的地方），争吵不休，反而产生重大内耗。 
3.两个人在一起工作可能会出现工作精力不能集中的情况。 
结对编程适用条件：两个程序员共同从事一个有趣又有挑战性的问题。他们会有不同的技术、遇到不同的挑战，但是他们都善于找到好的解决方法。例如，其中一个人可能是java专家，另一个人可能是强大程序设计者。他们能够结合彼此的脑力、知识及经验来共同处理复杂的任务， 从而创造出最好的解决方案。
三、在未来我是非常乐意适用结对编程的方式的。我自认为编程能力一般，而在结对编程过程中低级程序员结对与高级程序员结对相比收获更多。因为低级开发者并不一味坚持主见，没有强大的自尊心影响，与“正确性”相比，我更加关心学习。当两个低级程序员结对，他们的主要目标应该是学习。